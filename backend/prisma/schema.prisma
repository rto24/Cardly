generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(cuid())
  username    String         @unique
  email       String         @unique
  password    String
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  sentRequests Friend[]       @relation("FriendRequestsSent")
  receivedRequests Friend[]   @relation("FriendRequestsReceived")
  servers     ServerMember[]  // Servers the user is a member of
  ownedServers Server[]       @relation("ServerOwners") // Servers owned by the user
  sentInvitations ServerInvitation[] @relation("SentInvitations") // Server invitations sent
  receivedInvitations ServerInvitation[] @relation("ReceivedInvitations") // Server invitations received
  createdAt   DateTime        @default(now())
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String?
  imageUrl    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id]) // Many-to-One: Posts to User
  comments    Comment[]                   // One-to-Many: Post to Comments
  likes       Like[]                      // One-to-Many: Post to Likes
  createdAt   DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id]) // Many-to-One: Comments to Post
  user      User     @relation(fields: [userId], references: [id]) // Many-to-One: Comments to User
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id]) // Many-to-One: Likes to Post
  user      User     @relation(fields: [userId], references: [id]) // Many-to-One: Likes to User
}

model Friend {
  id         String   @id @default(cuid())
  senderId   String   // User who sends the friend request
  receiverId String   // User who receives the friend request
  sender     User     @relation("FriendRequestsSent", fields: [senderId], references: [id])
  receiver   User     @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
  status     String   @default("pending") // Status: pending, accepted, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Server {
  id          String         @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User           @relation("ServerOwners", fields: [ownerId], references: [id]) // Admin/Owner of the server
  members     ServerMember[] // Many-to-Many relation with User through ServerMember
  invitations ServerInvitation[] // Invitations to this server
  createdAt   DateTime       @default(now())
}

model ServerMember {
  id        String   @id @default(cuid())
  userId    String
  serverId  String
  role      String   @default("member") // Possible values: member, admin, moderator
  user      User     @relation(fields: [userId], references: [id])
  server    Server   @relation(fields: [serverId], references: [id])
  joinedAt  DateTime @default(now())
}

model ServerInvitation {
  id        String   @id @default(cuid())
  serverId  String
  senderId  String // User who sends the invitation
  receiverId String // User who receives the invitation

  server    Server   @relation(fields: [serverId], references: [id])
  sender    User     @relation("SentInvitations", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedInvitations", fields: [receiverId], references: [id])

  status    String   @default("pending") // Status: pending, accepted, rejected
  createdAt DateTime @default(now())
}