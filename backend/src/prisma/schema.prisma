generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username               String             @unique
  email                  String             @unique
  password               String
  createdAt              DateTime           @default(now())
  refreshToken           String?
  id                     Int                @id @default(autoincrement())
  comments               Comment[]
  receivedFriendRequests Friend[]           @relation("FriendRequestsReceived")
  sentFriendRequests     Friend[]           @relation("FriendRequestsSent")
  likes                  Like[]
  posts                  Post[]
  ownedServers           Server[]           @relation("ServerOwners")
  receivedInvitations    ServerInvitation[] @relation("ReceivedInvitations")
  sentInvitations        ServerInvitation[] @relation("SentInvitations")
  joinedServers          Server[]           @relation("ServerMembers")
}

model Post {
  title     String
  content   String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  id        Int       @id @default(autoincrement())
  userId    Int
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  content   String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model Friend {
  createdAt  DateTime @default(now())
  status     String   @default("pending")
  updatedAt  DateTime @updatedAt
  id         Int      @id @default(autoincrement())
  receiverId Int
  senderId   Int
  receiver   User     @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
  sender     User     @relation("FriendRequestsSent", fields: [senderId], references: [id])
}

model Server {
  name        String
  createdAt   DateTime           @default(now())
  id          Int                @id @default(autoincrement())
  ownerId     Int
  owner       User               @relation("ServerOwners", fields: [ownerId], references: [id])
  invitations ServerInvitation[]
  members     User[]             @relation("ServerMembers")
}

model ServerInvitation {
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  serverId   Int
  senderId   Int
  receiverId Int
  receiver   User     @relation("ReceivedInvitations", fields: [receiverId], references: [id])
  sender     User     @relation("SentInvitations", fields: [senderId], references: [id])
  server     Server   @relation(fields: [serverId], references: [id])
}
