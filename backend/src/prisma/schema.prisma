generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  password        String
  refreshToken    String?
  createdAt       DateTime          @default(now())
  posts           Post[]            // Relation: User has many Posts
  comments        Comment[]         // Relation: User has many Comments
  likes           Like[]            // Relation: User has many Likes
  sentFriendRequests   Friend[]     @relation("FriendRequestsSent") // Relation: Sent Friend Requests
  receivedFriendRequests Friend[]   @relation("FriendRequestsReceived") // Relation: Received Friend Requests
  ownedServers    Server[]          @relation("ServerOwners") // Relation: Owned Servers
  joinedServers   Server[]          @relation("ServerMembers") // Relation: Joined Servers
  sentInvitations ServerInvitation[] @relation("SentInvitations") // Relation: Sent Server Invitations
  receivedInvitations ServerInvitation[] @relation("ReceivedInvitations") // Relation: Received Server Invitations
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  imageUrl    String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id]) // Relation to User
  comments    Comment[] // Relation: Post has many Comments
  likes       Like[]    // Relation: Post has many Likes
  createdAt   DateTime  @default(now())
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  postId      Int
  userId      Int
  post        Post      @relation(fields: [postId], references: [id]) // Relation to Post
  user        User      @relation(fields: [userId], references: [id]) // Relation to User
  createdAt   DateTime  @default(now())
}

model Like {
  id          Int       @id @default(autoincrement())
  postId      Int
  userId      Int
  post        Post      @relation(fields: [postId], references: [id]) // Relation to Post
  user        User      @relation(fields: [userId], references: [id]) // Relation to User
}

model Friend {
  id          Int       @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  sender      User      @relation("FriendRequestsSent", fields: [senderId], references: [id]) // Relation to Sender
  receiver    User      @relation("FriendRequestsReceived", fields: [receiverId], references: [id]) // Relation to Receiver
  status      String    @default("pending") // Status: pending, accepted, rejected
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Server {
  id          Int       @id @default(autoincrement())
  name        String
  ownerId     Int
  owner       User      @relation("ServerOwners", fields: [ownerId], references: [id]) // Relation to Owner
  members     User[]    @relation("ServerMembers") // Relation to Members
  invitations ServerInvitation[] // Relation: Server has many Invitations
  createdAt   DateTime  @default(now())
}

model ServerInvitation {
  id          Int       @id @default(autoincrement())
  serverId    Int
  senderId    Int
  receiverId  Int
  server      Server    @relation(fields: [serverId], references: [id]) // Relation to Server
  sender      User      @relation("SentInvitations", fields: [senderId], references: [id]) // Relation to Sender
  receiver    User      @relation("ReceivedInvitations", fields: [receiverId], references: [id]) // Relation to Receiver
  status      String    @default("pending") // Status: pending, accepted, rejected
  createdAt   DateTime  @default(now())
}